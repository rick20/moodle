services:

    moodle:
        depends_on:
            database:
                condition: service_healthy
        image: ${PHP_IMAGE_NAME}
        container_name: moodle
        networks:
            - backend
        volumes:
            - 'html:${WEBSERVER_DOC_ROOT}'
            - 'moodle-data:/home/${DOMAIN_NAME}/moodledata'
            - type: bind
              source: ./php-fpm/php/conf.d/security.ini
              target: '${PHP_INI_DIR_PREFIX}/php/conf.d/security.ini'
            - type: bind
              source: ./php-fpm/php-fpm.d/z-www.conf
              target: '${PHP_INI_DIR_PREFIX}/php-fpm.d/z-www.conf'
            - type: bind
              source: ./packagecheck.sh
              target: '/tmp/packagecheck.sh'
        hostname: moodle
        restart: unless-stopped
        ports:
            - '9000:80'
        links:
            - database
            - redis
        healthcheck:
            test: ["CMD-SHELL", "/bin/pidof php-fpm > /dev/null || exit 1"]
            interval: 5s
            timeout: 5s
            retries: 1000
        environment:
            TZ: '${LOCAL_TIMEZONE}'
        labels:
            - 'docker-volume-backup.stop-during-backup=true'
        command: >
            bash -c "apt-get update && sh /tmp/packagecheck.sh 'git zip unzip libpcre3-dev cron nano' && curl -sSL https://github.com/mlocati/docker-php-extension-installer/releases/latest/download/install-php-extensions -o - | sh -s gd mysqli intl zip xmlrpc soap exif opcache && if pecl install -p -- redis; then pecl install -o -f redis && rm -rf /tmp/pear && docker-php-ext-enable redis; fi;
            if [ -z \"$$(ls -A ${WEBSERVER_DOC_ROOT}/moodle/config.php)\" ]; then git clone --depth 1 -b MOODLE_404_STABLE https://github.com/moodle/moodle.git && php ${WEBSERVER_DOC_ROOT}/moodle/admin/cli/install.php --chmod=02777 --non-interactive --agree-license --wwwroot=https://${DOMAIN_NAME} --dataroot=/home/${DOMAIN_NAME}/moodledata --dbtype=${DATABASE_CONNECT_EXTENSION} --dbhost=database --dbname=${DB_NAME} --dbuser=${DB_USER} --dbpass=${DB_PASSWORD} --fullname=${DOMAIN_NAME} --shortname=moodle --prefix=${DB_TABLE_PREFIX} --adminuser=admin --adminpass=admin123 --adminemail=${LETSENCRYPT_EMAIL} --supportemail=${LETSENCRYPT_EMAIL} && sed -i \"/$$CFG->directorypermissions = 02777;/a \\$$CFG->xsendfile = 'X-Accel-Redirect';\\n\\$$CFG->xsendfilealiases = array(\\n\\t'/dataroot/' => \\$$CFG->dataroot\\n);\" ${WEBSERVER_DOC_ROOT}/moodle/config.php && chmod 0644 ${WEBSERVER_DOC_ROOT}/moodle/config.php; fi &&
            (crontab -u root -l | grep -v -F \"${WEBSERVER_DOC_ROOT}/moodle/admin/cli/cron.php\" ; echo \"* * * * * php  /var/www/html/moodle/admin/cli/cron.php\") | crontab - || grep -qe 'date.timezone = ${LOCAL_TIMEZONE}' ${PHP_INI_DIR_PREFIX}/php/conf.d/security.ini || echo 'date.timezone = ${LOCAL_TIMEZONE}' >> ${PHP_INI_DIR_PREFIX}/php/conf.d/security.ini; php-fpm"

    webserver:
        depends_on:
            moodle:
                condition: service_healthy
        image: nginx:stable
        container_name: webserver
        networks:
            - backend
            - frontend
        volumes:
            - 'html:${WEBSERVER_DOC_ROOT}'
            - 'moodle-data:/home/${DOMAIN_NAME}/moodledata'
            - type: bind
              source: ./webserver/nginx.conf
              target: '${NGINX_PREFIX}/nginx.conf'
            - type: bind
              source: ./webserver/templates/nginx.conf.template
              target: '${NGINX_PREFIX}/templates/default.conf.template'
            - type: bind
              source: ./webserver/ssl-option/options-ssl-nginx.conf
              target: '${LETSENCRYPT_CONF_PREFIX}/options-ssl-nginx.conf'
            - type: bind
              source: ./ssl-conf.sh
              target: '/tmp/ssl-conf.sh'
            - 'certbot-etc:${LETSENCRYPT_CONF_PREFIX}'
            - '/tmp/acme-challenge:/tmp/acme-challenge'
        hostname: webserver
        restart: unless-stopped
        ports:
            - '80:80'
            - '443:443'
        links:
            - moodle
        environment:
            NGINX_HOST: ${DOMAIN_NAME}
            NGINX_PORT: 80
            TZ: '${LOCAL_TIMEZONE}'
        command: bash -c "/docker-entrypoint.sh nginx -v; sh /tmp/ssl-conf.sh '${DOMAIN_NAME}' '${LETSENCRYPT_CONF_PREFIX}' '${NGINX_PREFIX}'"

    certbot:
        depends_on:
            - webserver
        image: certbot/certbot:latest
        container_name: certbot
        networks:
            - backend
        volumes:
            - 'certbot-etc:${LETSENCRYPT_CONF_PREFIX}'
            - 'certbot-var:/var/lib/letsencrypt'
            - '/tmp/acme-challenge:/tmp/acme-challenge'
        restart: unless-stopped
        healthcheck:
            test: ["CMD-SHELL", "test -d ${LETSENCRYPT_CONF_PREFIX}/live/${DOMAIN_NAME} || exit 1"]
            interval: 5s
            timeout: 5s
            retries: 20
        environment:
            TZ: '${LOCAL_TIMEZONE}'
        entrypoint: /bin/sh -c "certbot certonly --webroot --webroot-path /tmp/acme-challenge --rsa-key-size 4096 --non-interactive --agree-tos --no-eff-email --force-renewal --email ${LETSENCRYPT_EMAIL} -d ${DOMAIN_NAME} -d www.${DOMAIN_NAME};
            trap exit TERM; while :; do certbot renew --dry-run; sleep 12h & wait $${!}; done;"

    database:
        image: ${DATABASE_IMAGE_NAME}:${DATABASE_VERSION}
        container_name: database
        networks:
            - backend
        volumes:
            - 'db:/var/lib/mysql'
            - 'db-backup-data:/tmp/backup'
            - type: bind
              source: ./database/conf.d/z-${DATABASE_IMAGE_NAME}.cnf
              target: '${MYSQL_CONF_PREFIX}/z-${DATABASE_IMAGE_NAME}.cnf'
        hostname: database
        restart: unless-stopped
        ports:
            - '3306:3306'
        healthcheck:
            test: ["CMD-SHELL", "${DATABASE_ADMIN_COMMANDLINE} ping --silent || exit 1"]
            interval: 5s
            timeout: 5s
            retries: 50
        environment:
            MYSQL_ROOT_PASSWORD: '${MYSQL_ROOT_PASSWORD}'
            MYSQL_DATABASE: '${DB_NAME}'
            MYSQL_USER: '${DB_USER}'
            MYSQL_PASSWORD: '${DB_PASSWORD}'
            MYSQL_ALLOW_EMPTY_PASSWORD: 'No'
            MYSQL_ROOT_HOST: '${MYSQL_ROOT_HOST}'
            TZ: '${LOCAL_TIMEZONE}'
        labels:
            - "docker-volume-backup.stop-during-backup=true"
            - "docker-volume-backup.archive-pre=/bin/sh -c 'mysqldump -uroot -p${MYSQL_ROOT_PASSWORD} --all-databases > /tmp/backup/db_backup_data.sql'"
            - "docker-volume-backup.exec-label=database"
        command: bash -c "${DATABASE_PACKAGE_MANAGER} && docker-entrypoint.sh --character-set-server=utf8mb4 --collation-server=utf8mb4_unicode_ci --default-authentication-plugin=${DATABASE_AUTHENTICATION_PLUGIN}"

    redis:
        image: redis:latest
        container_name: redis
        networks:
            - backend
        volumes:
            - 'dtredis:/data'
            - type: bind
              source: ./redis
              target: '${REDIS_CONF_PREFIX}/redis'
        hostname: redis
        sysctls:
            - net.core.somaxconn=512
        restart: unless-stopped
        ports:
            - '6379:6379'
        environment:
            ALLOW_EMPTY_PASSWORD: 'yes'
            TZ: '${LOCAL_TIMEZONE}'
        command: "redis-server ${REDIS_CONF_PREFIX}/redis/redis.conf"

networks:
    backend: null
    frontend: null

volumes:
    html:
        name: moodle-html
        driver: local
        driver_opts:
            type: none
            device: ${DIRECTORY_PATH}/moodle
            o: bind
    moodle-data:
        name: moodle-data
    db:
        name: ${DATABASE_CONT_NAME}-data
    db-backup-data:
        name: ${DATABASE_CONT_NAME}-backup-data
    dtredis:
        name: redis-data
    certbot-etc:
        external: true
    certbot-var:
        name: certbot-var
